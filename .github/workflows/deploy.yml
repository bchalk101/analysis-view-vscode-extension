name: Deploy to GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'query-engine/**'
      - 'deployment/**'
      - '.github/workflows/deploy.yml'
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  QUERY_ENGINE_SERVICE_NAME: query-engine-service
  MCP_SERVICE_NAME: analysis-mcp-server
  GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

jobs:
  deploy-query-engine:
    name: Deploy Query Engine
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:
      query_engine_url: ${{ steps.query-engine-url.outputs.service_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.0"

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push Query Engine Docker image
      env:
        IMAGE_TAG: gcr.io/${{ env.PROJECT_ID }}/${{ env.QUERY_ENGINE_SERVICE_NAME }}:${{ github.sha }}
        IMAGE_LATEST: gcr.io/${{ env.PROJECT_ID }}/${{ env.QUERY_ENGINE_SERVICE_NAME }}:latest
      run: |
        cd query-engine
        docker build -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST

    - name: Build and push MCP Server Docker image
      env:
        IMAGE_TAG: gcr.io/${{ env.PROJECT_ID }}/${{ env.MCP_SERVICE_NAME }}:${{ github.sha }}
        IMAGE_LATEST: gcr.io/${{ env.PROJECT_ID }}/${{ env.MCP_SERVICE_NAME }}:latest
      run: |
        cd mcp-server
        docker build -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST

    - name: Deploy infrastructure with Terraform
      working-directory: ./deployment/terraform
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_region: ${{ env.REGION }}
        TF_VAR_query_engine_service_name: ${{ env.QUERY_ENGINE_SERVICE_NAME }}
        TF_VAR_mcp_service_name: ${{ env.MCP_SERVICE_NAME }}
        TF_VAR_gcs_bucket_name: ${{ env.GCS_BUCKET_NAME }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TERRAFORM_STATE_BUCKET: terraform-state-bucket-analysis-view-${{ env.PROJECT_ID }}
      run: |
        # Bootstrap Terraform state and import existing resources
        ../scripts/bootstrap-terraform.sh

        # Apply infrastructure changes (backend already configured by bootstrap)
        terraform apply -auto-approve

    - name: Get service URLs
      id: service-urls
      run: |
        QUERY_ENGINE_URL=$(gcloud run services describe ${{ env.QUERY_ENGINE_SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        MCP_SERVER_URL=$(gcloud run services describe ${{ env.MCP_SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "query_engine_url=$QUERY_ENGINE_URL" >> $GITHUB_OUTPUT
        echo "mcp_server_url=$MCP_SERVER_URL" >> $GITHUB_OUTPUT
        echo "✅ Query Engine deployed at: $QUERY_ENGINE_URL (private)"
        echo "✅ MCP Server deployed at: $MCP_SERVER_URL (public)"