name: Deploy to GCP

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  QUERY_ENGINE_SERVICE_NAME: query-engine-service
  MCP_SERVICE_NAME: analysis-mcp-server
  GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

jobs:
  check-changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    outputs:
      query-engine: ${{ steps.filter.outputs.query-engine }}
      mcp-server: ${{ steps.filter.outputs.mcp-server }}
      terraform: ${{ steps.filter.outputs.terraform }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check file changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          query-engine:
            - 'query-engine/**'
          mcp-server:
            - 'mcp-server/**'
          terraform:
            - 'deployment/terraform/**'

  build-query-engine:
    name: Build Query Engine Image
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.query-engine == 'true'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push Query Engine Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./query-engine
        file: ./query-engine/Dockerfile
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.QUERY_ENGINE_SERVICE_NAME }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.QUERY_ENGINE_SERVICE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-mcp-server:
    name: Build MCP Server Image
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.mcp-server == 'true'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push MCP Server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-server
        file: ./mcp-server/Dockerfile
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.MCP_SERVICE_NAME }}:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/${{ env.MCP_SERVICE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [check-changes, build-query-engine, build-mcp-server]
    if: always() && (needs.build-query-engine.result == 'success' || needs.build-query-engine.result == 'skipped') && (needs.build-mcp-server.result == 'success' || needs.build-mcp-server.result == 'skipped')

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:
      query_engine_url: ${{ steps.service-urls.outputs.query_engine_url }}
      mcp_server_url: ${{ steps.service-urls.outputs.mcp_server_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.0"

    - name: Deploy infrastructure with Terraform
      working-directory: ./deployment/terraform
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_region: ${{ env.REGION }}
        TF_VAR_query_engine_service_name: ${{ env.QUERY_ENGINE_SERVICE_NAME }}
        TF_VAR_mcp_service_name: ${{ env.MCP_SERVICE_NAME }}
        TF_VAR_gcs_bucket_name: ${{ env.GCS_BUCKET_NAME }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TERRAFORM_STATE_BUCKET: terraform-state-bucket-analysis-view-${{ env.PROJECT_ID }}
      run: |
        # Bootstrap Terraform state and import existing resources
        ../scripts/bootstrap-terraform.sh

        # Apply infrastructure changes (backend already configured by bootstrap)
        terraform apply -auto-approve

    - name: Get service URLs
      id: service-urls
      run: |
        QUERY_ENGINE_URL=$(gcloud run services describe ${{ env.QUERY_ENGINE_SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        MCP_SERVER_URL=$(gcloud run services describe ${{ env.MCP_SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "query_engine_url=$QUERY_ENGINE_URL" >> $GITHUB_OUTPUT
        echo "mcp_server_url=$MCP_SERVER_URL" >> $GITHUB_OUTPUT
        echo "✅ Query Engine deployed at: $QUERY_ENGINE_URL (private)"
        echo "✅ MCP Server deployed at: $MCP_SERVER_URL (public)"

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: needs.deploy-infrastructure.result == 'success'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install pytest pytest-asyncio httpx

    - name: Run E2E tests
      env:
        MCP_SERVER_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.mcp_server_url }}/mcp
      run: |
        pytest tests/test_e2e.py -v
